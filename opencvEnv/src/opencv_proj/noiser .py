from augraphy import *
import cv2
    
class Noiser:
    def __init__(self, image):
        self.image = image
        self.noised_image = None

    def save_image(self, filename = "temp.png", size = None):
        if size != None:
            cv2.resize(self.noised_image, size)
        cv2.imwrite(filename, self.noised_image)
    
    def change_image(self, img):
        self.image = img

    def gradient_gaussian(self, light_position = None, direction = 135, max_brightness = 255, min_brightness = 0, linear_decay_rate = None, transparency = None):
        """
        The Lighting Gradient augmentation produces a decayed light mask generated by a light strip given position and direction, and applies it to the image as a lighting or brightness gradient.
        
        Parameter	Description
        light_position	Tuple of integers (x, y) specifying the center of light strip position, which is the reference point during rotating.
        direction	Integer from 0 to 360 specifying the rotation degree of light strip.
        max_brightness	Specifies the max brightness in the mask.
        min_brightness	Specifies the min brightness in the mask.
        linear_decay_rate	Only valid in linear_static mode. Suggested value is within [0.2, 2]
        transparency	Specifies the transparency used by the generated mask, value range of 0 to 1.

        """
        lighting_gradient_gaussian = LightingGradient(
            light_position=light_position,
            direction=direction,
            max_brightness=max_brightness,
            min_brightness=min_brightness,
            mode="gaussian",
            linear_decay_rate=linear_decay_rate,
            transparency=transparency
            )

        img_lighting_gradient_gaussian = lighting_gradient_gaussian(self.image)
        self.noised_image = img_lighting_gradient_gaussian

    def fold(self, fold_count = 2 , fold_noise = 0.0, gradient_width = (0.2, 0.3), gradient_height = (0.01, 0.02)):
        """
        The Folding augmentation emulates folded paper being scanned, with a visible warp effect around the fold line.

        Parameter	Description
        fold_count	Number of folds to apply.
        fold_noise	Level of noise added to folding area. Range from 0 to 1.
        gradient_width	Measure of the space affected by the fold prior to being warped, as percentage of page width.
        gradient_height	Measure of depth of fold, as percentage of page height.
        
        """
        folding = Folding(
            fold_count=fold_count,
            fold_noise=fold_noise,
            gradient_width=gradient_width,
            gradient_height=gradient_height,
        )

        img_folding = folding(self.image)
        self.noised_image = img_folding

    def drumroll(self, line_width_range=(1, 4), line_concentration = 0.5, direction = 2, noise_intensity= 0.8, noise_value = (0, 30), ksize=(3, 3), sigmaX=0):
        """
        The Dirty Drum augmentation emulates deposits of dirt and ink-grime from dirty printer drums.
        Parameter	Description
        line_width_range	The range from which the width of a dirty drum line is sampled.
        line_concentration	Concentration or number of dirty drum lines.
        direction	Direction of effect, 0=horizontal, 1=vertical, 2=both.
        noise_intensity	Intensity of the effect.
        noise_value	Tuple of ints to determine value of dirty drum noise
        ksize	Height/width pair from which to sample the kernel size.
        sigmaX	Standard deviation of the kernel along the x-axis.
        """
        dirtydrum = DirtyDrum(
                line_width_range=line_width_range,
                line_concentration = line_concentration,
                direction = direction,
                noise_intensity= noise_intensity,
                noise_value = noise_value,
                ksize=ksize,
                sigmaX=sigmaX
                )

        img_dirtydrum = dirtydrum(self.image)
        self.noised_image = img_dirtydrum

    def book_bindings(self, radius_range=(10, 30), curve_intensity_range=(10, 30)): 
        """
        The BookBinding augmentation creates the effect of a page curling away from the scanner bed, towards the binding of a book or magazine.

        Parameter	Description
        radius_range	The range of the curl radius, in pixels.
        curve_intensity_range	The intensity by which the page text should be curved.
        """

        bookbinding = BookBinding(
                radius_range=radius_range,
                curve_intensity_range=curve_intensity_range
                )
        
        img_bookbinding = bookbinding(self.image)
        self.noised_image = img_bookbinding

    def pencil_scribbles(self, size_range=(400, 800), count_range=(2, 3), stroke_count_range=(1, 2), thickness_range=(1, 3), brightness_change=128):
        """
        The Pencil Scribbles augmentation applies random pencil scribbles to image.

        Parameter	Description
        size_range	The range for the size of the scribble to be created
        count_range	The range for the number of scribbles to create.
        stroke_count_range	The range for the number of strokes to create in each scribble.
        thickness_range	The range for the size of the scribbles to create.
        brightness_change	Value change for the brightness of the strokes. Default 128 creates a graphite-like appearance.
        """
        pencilscribbles = PencilScribbles(
                size_range=size_range,
                count_range=count_range,
                stroke_count_range=stroke_count_range,
                thickness_range=thickness_range,
                brightness_change=brightness_change
                )

        img_pencilscribbles = pencilscribbles(self.image)
        self.noised_image = img_pencilscribbles

    def page_border(self, side="bottom", width_range=(40, 80), pages=4, noise_intensity_range=(0.4, 0.8), curve_frequency = (4, 8), curve_height = (2, 4), curve_length_one_side = (50, 100), value=(30,90)):
        """
            The Page Border augmentation applies a shadow of underlying pages on any side of the page, creating an effect of single or multiple borders on specified side of the page.

            Parameter	Description
            side	The side of the page on which the border will be drawn. One of: left, right, top, bottomm random.
            width_range	The width of the border.
            pages	The number of pages to augment in the border.
            noise_intensity_range	The range of noise applied around the border and pages.
            curve_frequency	Number of curvy section in the generated shadow lines.
            curve_height	Height of curvy section in the generated shadow lines.
            curve_length_one_side	Length for one side of generated curvy section.
            value	Pair of ints determining intensity of generated shadow lines.
        """
        pageborder = PageBorder(
                side=side,
                width_range=width_range,
                pages=pages,
                noise_intensity_range=noise_intensity_range,
                curve_frequency=curve_frequency,
                curve_height=curve_height,
                curve_length_one_side=curve_length_one_side,
                value=value
                )
        
        img_pageborder = pageborder(self.image)
        self.noised_image = img_pageborder

    def markup_highlight(self, num_lines_range=(5, 7), markup_length_range=(0.5, 1), markup_thickness_range=(1, 3), markup_color=(0, 255, 0), repetitions=5, single_word_mode=True):
        """
        The Markup augmentation uses contours detection to detect text lines and add a smooth text strikethrough, highlight or underline effect.

        Parameter	Description
        num_lines_range	Pair of ints determining the number of added markup effect.
        markup_length_range	Pair of floats between 0 to 1 , to determine the length of added markup effect.
        markup_thickness_range	Pair of ints, to determine the thickness of added markup effect.
        markup_color	bgr color tuple.
        
        """

        markup = Markup(
                num_lines_range=num_lines_range,
                markup_length_range=markup_length_range,
                markup_thickness_range=markup_thickness_range,
                markup_color=markup_color,
                repetitions=repetitions,
                single_word_mode=single_word_mode,
                markup_type="highlight"
        )

        img_markup = markup(self.image)
        self.noised_image = img_markup
    
    def bleedthrough(self, intensity_range=(0.1, 0.2), color_range=(0, 224), ksize=(17, 17), sigmaX=0, alpha=0.2, offsets=(10, 20)):
        """
        The BleedThrough augmentation emulates ink bleeding through the page from random image or the reverse side.

        Parameter	Description
        intensity_range	The range from which noise intensity is sampled.
        color_range	The range from which color noise is sampled.
        ksize	Tuple of height/width from which to sample the kernel size. Higher value increases the spread of the bleeding effect.
        sigmaX	Standard deviation of the kernel along the x-axis.
        alpha	Intensity of bleeding effect.
        offsets	Distance in x and y directions to shift the bleedthrough effect.
        """

        bleedthrough = BleedThrough(
                intensity_range=intensity_range,
                color_range=color_range,
                ksize=ksize,
                sigmaX=sigmaX,
                alpha=alpha,
                offsets=offsets
        )

        img_bleedthrough = bleedthrough(self.image)
        self.noised_image = img_bleedthrough

    def bad_photo_copy(self, noise_type=1,noise_side="left", noise_iteration=(2,3),noise_size=(2,3),noise_sparsity=(0.2,0.3),noise_concentration=(0.05,0.1)):
        """
        The Bad Photocopy augmentation produces noise blobs simulating a dirty copier.

        noise_type	Types of noises to generate different mask patterns.
        noise_side	Location of noise.
        noise_iteration	Pair of ints to determine number of iterations to apply noise in the mask.
        noise_size	Pair of ints to determine scale of noise in the mask.
        noise_value	Intensity range of noise, lower value get darker effect.
        noise_sparsity	Pair of floats determining sparseness of noise.
        noise_concentration	Pair of floats determining concentration of noise.
        """
            
        badphotocopy = BadPhotoCopy(
            noise_type=noise_type,
            noise_side=noise_side,
            noise_iteration=noise_iteration,
            noise_size=noise_size,
            noise_sparsity=noise_sparsity,
            noise_concentration=noise_concentration
        )

        img_badphotocopy = badphotocopy(self.image)
        self.noised_image = img_badphotocopy